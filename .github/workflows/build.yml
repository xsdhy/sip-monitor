name: Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  IMAGE_NAME: ${{github.repository}}
  IMAGE_TAG_NAME: ${{ github.ref_name }}

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
            extension: .exe
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Install dependencies for CGO
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libsqlite3-dev gcc-aarch64-linux-gnu
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            sudo apt-get install -y gcc-mingw-w64
          fi
      
      - name: Build web assets
        run: |
          cd web
          npm install
          CI=false npm run build
          cd ..
      
      - name: Build with CGO
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          OUTPUT_NAME="sip-monitor-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.extension }}"
          
          if [[ "${{ matrix.goos }}" == "linux" && "${{ matrix.goarch }}" == "arm64" ]]; then
            CC=aarch64-linux-gnu-gcc go build -o ${OUTPUT_NAME}
          elif [[ "${{ matrix.goos }}" == "windows" ]]; then
            CC=x86_64-w64-mingw32-gcc go build -o ${OUTPUT_NAME}
          else
            go build -o ${OUTPUT_NAME}
          fi
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: sip-monitor-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.extension }}
  
  create-release:
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: binaries
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: binaries/*
          draft: false
          prerelease: false
          generate_release_notes: true

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: xsdhy/sip-monitor:latest,xsdhy/sip-monitor:${{ github.ref_name }}